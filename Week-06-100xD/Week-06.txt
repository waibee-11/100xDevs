LECTURE 1:

REACT RETURNS:
Every React component must return only 1 element. This is ensure easier reconcilation. If you want to return
multiple elements, encapsulate them inside a single parent element.

------------------------------------------------------------------

RE-RENDERING:
React creates dynamic websites. Anytime such dynamic features happen, a re-render happens. The rule of thumb is to
minimize the number of re-renders. You don't want to re-render static part of the page.

A re-render means that:
- React has done some work of calculate what all should update in a componenent
- The component actually got called

A re-render happens when:
- A state variable that is being used inside a component changes
- A parent component re-render triggers a re-render for all the children

Ways to minimize re-renders:
- Define state variables only inside components that use them
- Passing the component to React.memo allows you to skip re-renders if the props do not change

------------------------------------------------------------------

KEYS IN REACT:
- In every React component array, it is important to define a key or id property that allows React to understand that
every component is seperate and to make out what has changed.
- This basically allows React to minimize re-renders by better reconcilation.

------------------------------------------------------------------

RECONCILATION:
- It is the process by which React calculates what has changed and performs necessary operations.

------------------------------------------------------------------

WRAPPER COMPONENTS:
- These are componenents that take other componenents as input. It is a way to have a template for a type of
components, even if each one has different content.
- Make a wrapper component and then add a component inside it. The inside content can be accessed by 'props.children'

------------------------------------------------------------------

USEEFFECT:
- Allows you to hook into lifecycle feature.
- It runs only once when the component mounts for the first time.
- It is similar to componentOnMount()

------------------------------------------------------------------

USEMEMO:
- It also guards a certain code from running unless something in the dependency array changes
- However, here you can return something from inside the function and use const x = useMemo(...) and use x elsewhere
- Basically, it is same as useEffect() with a subtle difference
- We usually use useMemo to memoize a variable that depends on variables that have not changed.
- USE useMemo() WHEN YOU CREATE A DERIVED STATE TO ENSURE THAT ITS VALUE CHANGES ONLY WHEN THE DEPENDENCY CHANGES

------------------------------------------------------------------

USECALLBACK:
- You actually don't need to use useCallback() much. Anything that useCallback() does can be done using useMemo()
- Technically, it is used to memoize a function.
- If the function is a prop for a componenet, and we have used memo to miminize re-render for that componenent, it will
still re-render because the function would re-run even if its dependancies don't change.
- Here, you can use useCallback() to prevent the function from re-running if its dependancies have not changed.
- Therefore, we will avoid the extra re-render of the componenent.

------------------------------------------------------------------

USEREF:
- This is used to get a reference to DOM elements.
- Similar to document.getElementById(), but more clean syntax.

------------------------------------------------------------------